import 'dart:io';
import 'package:args/args.dart';
import 'package:path/path.dart' as path;
import '../utils/logger.dart';
import '../utils/file_utils.dart';

/// Command to create barrel files for Dart project directories
class BarrelCommand {
  final Logger logger;

  BarrelCommand(this.logger);

  /// Execute the barrel command
  Future<void> execute(ArgResults results) async {
    final targetDirectory = results.rest.isNotEmpty ? results.rest.first : '.';

    await _createBarrel(targetDirectory);
  }

  /// Create a barrel file for the specified directory
  Future<void> _createBarrel(String targetPath) async {
    final dir = Directory(targetPath);

    if (!dir.existsSync()) {
      logger.error('Directory "$targetPath" does not exist');
      return;
    }

    final absolutePath = dir.absolute.path;
    final dirName = path.basename(absolutePath);

    logger.step('Creating barrel file for directory: $targetPath');

    // Get all Dart files in the directory and subdirectories
    final dartFiles = _getDartFiles(dir);

    if (dartFiles.isEmpty) {
      logger.warning('No Dart files found in "$targetPath"');
      return;
    }

    // Generate barrel file content
    final barrelContent = _generateBarrelContent(dartFiles, dir);
    final barrelPath = path.join(absolutePath, '$dirName.dart');

    // Write the barrel file
    FileUtils.writeFile(barrelPath, barrelContent);

    logger.success('Created barrel file: ${path.relative(barrelPath)}');
    logger.info('Exports ${dartFiles.length} Dart files');
  }

  /// Get all Dart files in directory and subdirectories, excluding barrel files
  List<File> _getDartFiles(Directory dir) {
    final dartFiles = <File>[];
    final dirName = path.basename(dir.path);
    final barrelFileName = '$dirName.dart';

    try {
      for (final entity in dir.listSync(recursive: true)) {
        if (entity is File) {
          final fileName = path.basename(entity.path);

          // Include only .dart files, exclude the barrel file itself and generated files
          if (fileName.endsWith('.dart') &&
              fileName != barrelFileName &&
              !fileName.endsWith('.g.dart') &&
              !fileName.endsWith('.freezed.dart') &&
              !fileName.endsWith('.mocks.dart')) {
            dartFiles.add(entity);
          }
        }
      }
    } catch (e) {
      logger.error('Error scanning directory: $e');
    }

    // Sort files for consistent output
    dartFiles.sort((a, b) => a.path.compareTo(b.path));

    return dartFiles;
  }

  /// Generate the content for the barrel file
  String _generateBarrelContent(List<File> dartFiles, Directory baseDir) {
    final buffer = StringBuffer();
    final basePath = baseDir.absolute.path;

    // Add header comment
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer
        .writeln('// Generated by QfTools barrel command on ${DateTime.now()}');
    buffer.writeln('// Directory: ${path.basename(basePath)}');
    buffer.writeln();

    // Generate export statements
    for (final file in dartFiles) {
      final relativePath = path.relative(file.path, from: basePath);
      final exportPath = relativePath.replaceAll(r'\', '/');

      buffer.writeln("export '$exportPath';");
    }

    return buffer.toString();
  }
}
